#!/usr/bin/make -f
# -*- makefile -*-

# This file is licensed under the terms of the Gnu Public License.
# Copyright 2013 Robert Bruce Park <r@robru.ca>

# Some inspiration taken from the Emacs' debian/rules file created by
# Mark Eichin, Ian Jackson, Jérôme Marant, and Rob Browning, however
# the code below was largely rewritten from scratch in 2013.

# What suffix should we append to "emacs" to make it parallel-installable?
# Currently this rules file is only used for daily snapshots so this value will
# only ever be "-snapshot", however later on this should make it very
# easy to transition from "emacs-snapshot" to "emacs24" as necessary.
suffix = $(shell dpkg-parsechangelog  \
		| perl -ne 's/Source: emacs// && print && exit')

# common configure flags
confflags += --prefix=/usr
confflags += --sharedstatedir=/var/lib
confflags += --program-suffix="$(suffix)"

# These package names should match what's defined in debian/control
src_pkg_name = emacs$(suffix)
gtk_pkg_name = $(src_pkg_name)
nox_pkg_name = $(gtk_pkg_name)-nox

# Gtk config options
confflags_gtk += $(confflags)
confflags_gtk += --with-x=yes
confflags_gtk += --with-x-toolkit=gtk3

# Gtk dh options
auto_gtk += --package=$(gtk_pkg_name)
auto_gtk += --builddirectory=build/gtk

# NoX config options
confflags_nox += $(confflags)
confflags_nox += --with-x=no

# NoX dh options
auto_nox += --package=$(nox_pkg_name)
auto_nox += --builddirectory=build/nox

# These files are created from emacsVER templates
autogen_install_files :=  \
  debian/$(gtk_pkg_name).install  \
  debian/$(gtk_pkg_name).postinst  \
  debian/$(gtk_pkg_name).prerm  \
  debian/$(nox_pkg_name).install  \
  debian/$(nox_pkg_name).postinst  \
  debian/$(nox_pkg_name).prerm

define deb_sub
  perl -p  \
    -e "s|\@SUFFIX\@|$(suffix)|go;"  \
    -e "s|\@PKG_NAME\@|$(pkg_name)|go;"  \
      < $(1) > $(2)
endef

# Set pkg_name depending on which we are currently building.
debian/$(gtk_pkg_name).%: pkg_name := $(gtk_pkg_name)
debian/$(nox_pkg_name).%: pkg_name := $(nox_pkg_name)

# Build emacs-snapshot.{install,...} from emacsVER.{install,...}
debian/$(gtk_pkg_name).%: debian/emacsVER.%
	$(call deb_sub,$<,$@)

# Build emacs-snapshot-nox.{install,...} from emacsVER.{install,...}
debian/$(nox_pkg_name).%: debian/emacsVER.%
	$(call deb_sub,$<,$@)

override_dh_auto_clean:
	dh_auto_clean $(auto_gtk)
	dh_auto_clean $(auto_nox)

override_dh_auto_configure:
	./autogen.sh
	dh_auto_configure $(auto_gtk) -- $(confflags_gtk)
	dh_auto_configure $(auto_nox) -- $(confflags_nox)

override_dh_auto_build:
	dh_auto_build $(auto_gtk)
	dh_auto_build $(auto_nox)

# Run tests, but don't allow failures to stop the build.
override_dh_auto_test:
	dh_auto_test $(auto_gtk) || true
	dh_auto_test $(auto_nox) || true

# By default dh_auto_install will dump both packages into debian/tmp,
# with the second one clobbering the first one, so we used --destdir to
# force installation into different places.
override_dh_auto_install: $(autogen_install_files)
	dh_auto_install $(auto_gtk) --destdir=debian/$(gtk_pkg_name)
	dh_auto_install $(auto_nox) --destdir=debian/$(nox_pkg_name)
#
#	Find the binaries that we need to pass to update-alternatives.
	alternatives=`ls debian/$(gtk_pkg_name)/usr/bin | xargs`  \
	  && set -x  \
	  && for f in debian/emacs*.*;  \
	  do  \
	    perl -pwi -e "s|\@ALTERNATIVES\@|$${alternatives}|go" $$f;  \
	  done

# Use of --destdir above causes the default dh_install to fail,
# because it looks for files in debian/tmp (which does not exist). So
# override it to instead delete the files we don't want
override_dh_install:
#	Strip images from NoX.
	rm -vrf debian/$(nox_pkg_name)/usr/share/emacs/*/etc/images
#
#	Strip non-byte-compiled versions of byte-compiled files.
	find debian/ -name '*.elc'  \
		| perl -pe 's/(.*)\.elc/\1.el\n\1.el.gz/g'  \
		| xargs rm -vf
#
#	Strip some unnecessary dirs
	rm -vrf debian/*/var/
	rm -vrf debian/*/usr/local
#
#	And some things lintian doesn't like
	rm -vrf debian/*/usr/share/emacs/*/etc/copying.paper
	rm -vrf debian/*/usr/share/emacs/*/lisp/COPYING

%:
	dh $@ --parallel
